
#import "RNFMAudioPlayer.h"

@implementation RCTConvert (AudioPlayerPlaybackState)

RCT_ENUM_CONVERTER(FMAudioPlayerPlaybackState, (@{
  @"audioPlayerPlaybackStateOfflineOnly": @(FMAudioPlayerPlaybackStateOfflineOnly),
  @"audioPlayerPlaybackStateUninitialized": @(FMAudioPlayerPlaybackStateUninitialized),
  @"audioPlayerPlaybackStateUnavailable": @(FMAudioPlayerPlaybackStateUnavailable),
  @"audioPlayerPlaybackStateWaitingForItem": @(FMAudioPlayerPlaybackStateWaitingForItem),
  @"audioPlayerPlaybackStateReadyToPlay": @(FMAudioPlayerPlaybackStateReadyToPlay),
  @"audioPlayerPlaybackStatePlaying": @(FMAudioPlayerPlaybackStatePlaying),
  @"audioPlayerPlaybackStatePaused": @(FMAudioPlayerPlaybackStatePaused),
  @"audioPlayerPlaybackStateStalled": @(FMAudioPlayerPlaybackStateStalled),
  @"audioPlayerPlaybackStateSkip": @(FMAudioPlayerPlaybackStateRequestingSkip),
  @"audioPlayerPlaybackStateComplete": @(FMAudioPlayerPlaybackStateComplete)
  }), FMAudioPlayerPlaybackStateUninitialized, integerValue)

@end


@implementation RNFMAudioPlayer

RCT_EXPORT_MODULE()

- (dispatch_queue_t)methodQueue
{
  return dispatch_get_main_queue();
}

+ (BOOL)requiresMainQueueSetup
{
    return YES;
}

- (NSDictionary *)constantsToExport
{
    return @{
         @"audioPlayerPlaybackStateOfflineOnly": @(FMAudioPlayerPlaybackStateOfflineOnly),
         @"audioPlayerPlaybackStateUninitialized": @(FMAudioPlayerPlaybackStateUninitialized),
         @"audioPlayerPlaybackStateUnavailable": @(FMAudioPlayerPlaybackStateUnavailable),
         @"audioPlayerPlaybackStateWaitingForItem": @(FMAudioPlayerPlaybackStateWaitingForItem),
         @"audioPlayerPlaybackStateReadyToPlay": @(FMAudioPlayerPlaybackStateReadyToPlay),
         @"audioPlayerPlaybackStatePlaying": @(FMAudioPlayerPlaybackStatePlaying),
         @"audioPlayerPlaybackStatePaused": @(FMAudioPlayerPlaybackStatePaused),
         @"audioPlayerPlaybackStateStalled": @(FMAudioPlayerPlaybackStateStalled),
         @"audioPlayerPlaybackStateSkip": @(FMAudioPlayerPlaybackStateRequestingSkip),
         @"audioPlayerPlaybackStateComplete": @(FMAudioPlayerPlaybackStateComplete)
    };
};

- (NSArray<NSString *> *)supportedEvents {
    return @[
             @"availability",
             @"state-change",
             @"station-change"
     ];
}

- (NSArray<NSDictionary *> *) mapStationListToDictionary: (FMStationArray *) inStations {
    NSMutableArray<NSDictionary *> *outStations = [[NSMutableArray alloc] init];
    
    for (FMStation *station in inStations) {
        [outStations addObject:@{
                 @"id": station.identifier,
                 @"name": station.name,
                 @"options": station.options
             }];
    }
    
    return outStations;
}

RCT_EXPORT_METHOD(initializeWithToken:(NSString *)token secret:(NSString *)secret)
{
    RCTLogInfo(@"initializing with token %@ and secret %@", token, secret);

    _player = FMAudioPlayer.sharedPlayer;

    [FMAudioPlayer setClientToken:token secret:secret];

    [FMAudioPlayer.sharedPlayer whenAvailable:^{
        [self sendEventWithName:@"availability" body:@{
                                           @"available": @YES,
                                           @"stations": [self mapStationListToDictionary:_player.stationList],
                                           @"activeStationId": _player.activeStation.identifier
                                           }];
    } notAvailable:^{
        [self sendEventWithName:@"availability" body:@{
                                           @"available": @NO
                                           }];
    }];

    [[NSNotificationCenter defaultCenter] addObserver:self
             selector:@selector(onPlaybackStateDidChangeNotification:) name:FMAudioPlayerPlaybackStateDidChangeNotification object:_player];
    [[NSNotificationCenter defaultCenter] addObserver:self
             selector:@selector(onActiveStationDidChangeNotification:) name:FMAudioPlayerActiveStationDidChangeNotification object:_player];
}

- (void)stopObserving {
    // make sure to unsubscribe, or we might get 'Bridge is not set!' crashes
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
    // kill music, since nobody is observing it any more
    [_player stop];
}

- (void) onActiveStationDidChangeNotification: (NSNotification *)notification {
    [self sendEventWithName:@"station-change" body:@{
                                       @"activeStationId": _player.activeStation.identifier }];
}

- (void) onPlaybackStateDidChangeNotification: (NSNotification *)notification {
    [self sendEventWithName:@"state-change" body:@{
                                       @"state": @(_player.playbackState) }];
    
}

RCT_EXPORT_METHOD(play)
{
  FMAudioPlayer *player = [FMAudioPlayer sharedPlayer];
  RCTLogInfo(@"play called");
  [player play];
  
    /*
  NSString *eventName = notification.userInfo[@"name"];
  [self sendEventWithName:@"EventReminder" body:@{@"name": eventName}];
     */
}

RCT_EXPORT_METHOD(pause)
{
  FMAudioPlayer *player = [FMAudioPlayer sharedPlayer];
  RCTLogInfo(@"pause called");
  [player pause];
}

RCT_EXPORT_METHOD(skip)
{
  FMAudioPlayer *player = [FMAudioPlayer sharedPlayer];
  RCTLogInfo(@"skip called");
  [player skip];
}

RCT_EXPORT_METHOD(stop)
{
  FMAudioPlayer *player = [FMAudioPlayer sharedPlayer];
  RCTLogInfo(@"stop called");
  [player stop];
}


@end
  
